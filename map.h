/**
 * @file map.h
 * @author Morticzek (https://github.com/Morticzek)
 * @brief The C++ Map project - header file
 * */

#pragma once
#ifndef FOCPMAP_MAP_H
#define FOCPMAP_MAP_H
#ifndef INFINITY
#define INFINITY std::numeric_limits<int>::max();
#endif
#include <iostream>
using namespace std;
class Map
{
public:
    /**
    * @struct finalResult A linked list structure
    * @brief A linked list structure, used to contain roads calculated before-hand
    * It is generated by the function recursiveBacktracker, based on the data from cityDataChart.
    * The list is generated from the end to the beginning of the path, therefore all the nodes are added to the beginning of the list.
    * @param city1 The first city (at the beginning of a road)
    * @param city2 The second city (at the end of a road)
    * @param distance An integer value corresponding to the distance from city1 to city2
    * @param next A pointer to the next node
    **/
    struct finalResult {
        string city1, city2;
        int distance;
        finalResult* next = nullptr;
    };
    /**
     * A pointer to the first element of the linked list
     **/
    struct finalResult* headFinal = nullptr;
    /**
     * A pointer to the current element of the linked list
     **/
    struct finalResult* currFinal = nullptr;
    /**
     * A temporary pointer to an element of the linked list (used in node deletion)
     **/
    struct finalResult* tempFinal = nullptr;

    /**
     * @brief A structure gathering data from the first input file (the one containing all the possible routes)
     * Data from this structure is used in multiple functions such as recursiveBacktracker (to acquire information about paths)
     * or visitingCalculator (to assign distance and prevCity values to the cityDataChart-structured list).
     * @param city1 The first city (at the beginning of a road)
     * @param city2 The second city (at the end of a road)
     * @param distance An integer value corresponding to the distance from city1 to city2
     **/
    struct cityDataBase
    {
        string city1, city2;
        int distance;
        cityDataBase* next = nullptr;
    };
    /**
     * A pointer to the first element of the linked list
     **/
    struct cityDataBase* headBase = nullptr;
    /**
     * A pointer to the current element of the linked list
     **/
    struct cityDataBase* currBase = nullptr;
    /**
     * A temporary pointer to an element of the linked list (used in node deletion)
     **/
    struct cityDataBase* tempBase = nullptr;

    /**
     * @brief A structure containing unique data about each city
     * This structure is used by a recursive function recursiveBacktracker to create an another linked list containing the shortest path.
     * @param city The name of the city
     * @param cityPrev The name of the city preceding the present city through a road
     * @param sumOfDistances An integer value containing a summed up distance value (from the starting city to the present one)
     * @param visited A boolean value determining whether the indicated city has been both reached and its distance from the starting city is finite and countable
     **/
    struct cityDataChart
    {
        string city, prevCity;
        int sumOfDistances;
        bool visited;
        cityDataChart* next = nullptr;
    };
    /**
    * A pointer to the first element of the linked list
    **/
    struct cityDataChart* headChart = nullptr;
    /**
     * A pointer to the current element of the linked list
     **/
    struct cityDataChart* currChart = nullptr;
    /**
     * A temporary pointer to an element of the linked list (used in node deletion)
     **/
    struct cityDataChart* tempChart = nullptr;

    /**
     * @brief A structure containing data from the second input file
     * Contains data from the second input file (the 'orders' file, where each line of text in the form
     * of two cities is being put into a program and calculated to determine the distance between both cities with steps)
     * @param cityBegin The city from which the calculation begins (the 'origin' city)
     * @param cityEnd The city where the calculation ends (the 'destination' city)
     **/
    struct cityDataReceived
    {
        string cityBegin, cityEnd;
        cityDataReceived* next = nullptr;
    };
    /**
    * A pointer to the first element of the linked list
    **/
    struct cityDataReceived* headReceived = nullptr;
    /**
     * A pointer to the current element of the linked list
     **/
    struct cityDataReceived* currReceived = nullptr;
    /**
     * A temporary pointer to an element of the linked list (used in node deletion)
     **/
    struct cityDataReceived* tempReceived = nullptr;
    /**
     * @brief A temporary linked list structure
     * A linked list structure used to create a chart - takes both cities from each line of the first input file and
     * sorts out duplicate values, leaving uniquely named cities ready to be put into a chart.
     * @param cityName A city name (origin: the 'map' text file)
     * @param next Pointer to the next element of the list
     * */
    struct temporaryList
    {
        string cityName;
        temporaryList* next = nullptr;
    };
    /**
    * A pointer to the first element of the linked list
    **/
    struct temporaryList* headTemp = nullptr;
    /**
     * A pointer to the current element of the linked list
     **/
    struct temporaryList* currTemp = nullptr;
    /**
     * A temporary pointer to an element of the linked list (used in node deletion)
     **/
    struct temporaryList* tempTemp = nullptr;
    /**
     * @brief A void function allocating the data from the dataAssigner into a singly-linked list
     * @param cityNode A structure consisting of two cities and the distance between them
     **/
    void nodeAccumulate(cityDataBase cityNode);
    /**
     * @brief A void function building up a linked list consisting of data from the first input file
     * @param cityNode A structure consisting of two cities and the distance between them
     * */
    void databaseAccumulate(cityDataBase cityNode);
    /**
     * @brief A void function building up a linked list consisting of data from the second input file
     * @param cityNode A structure consisting of two cities (city 'from' and city 'to')
     * */
    void dataReceiverAccumulate(cityDataReceived cityNode);
    /**
     * @brief A void function building up a linked list from all the names of cities from the first input file
     * @param cityNode A structure holding a city name
     * */
    void dataChartAccumulate(temporaryList cityNode);
    /**
     * @brief A void function sorting out unique city names acquired from the first input file
     * @param node A pointer to the head node of the linked list based on the temporaryList struct
     * */
    void uniqueLinkedList(temporaryList* node);
    /**
     * @brief A void function clearing a singly-linked list containing the already-outputted path
     **/
    void clearLinkedList();
    /**
     *  @brief A void function acquiring 3 string names (the map, routes and output file names)
     *  Assigns values to corresponding structs, then sends them to linked lists
     *  @param mapFileName Name of the map file
     *  @param routeFileName Name of the route file
     *  @param outputFileName Name of the output file
     **/
    void dataAssigner(string mapFileName, string routeFileName, string outputFileName);
    /**
     * @brief A void function selecting the city closest to the beginning city that is unvisited
     * Calculates the nearest city from the beginning city, matches data from the cityDataChart list with cityDataBase list paths
     * Sends all the necessary information to visitingCalculator
     * Ending condition: Lack of unvisited cities to visit OR lack of accessible cities to visit
     * @param endCity The name of the 'destination' city
     * @param currentCity The name of the currently evaluated city
     * @param beginCity The name of the 'origin' city
     * @param chartList A list containing data about every unique city
     * @param databaseList A list containing all available roads from one city to another
     * @param outputFileName The name of the output file
     **/
    void visitingMarker(string endCity, string currentCity, string beginCity, cityDataChart* headC, cityDataBase* headB, cityDataChart* currC, string outputFileName);
    /**
     * @brief A void function calculating all routes from the city marked by function visitingMarker
     * Calculates all distances from the 'marked' city (coming from visitingMarker) to any other city connected directly to it
     * After calculating all possible paths marks the city visited and goes back into visitingMarker
     * @param temporaryCity The name of the city being evaluated in respect to currentCity
     * @param endCity The name of the 'destination' city
     * @param currentCity The name of the currently evaluated city
     * @param beginCity The name of the 'origin' city
     * @param chartList A list containing data about every unique city
     * @param databaseList A list containing all available roads from one city to another
     * @param outputFileName The name of the output file
     **/
    void visitingCalculator(string temporaryCity, string endCity, string currentCity, string beginCity, cityDataChart* headC, cityDataBase* headB, cityDataChart* currC, string outputFileName);
    /**
     * @brief A void function used mainly for checking the calculated contents of every city
     * Creates an instance of the final list where the path of the current order is going to be held
     * (Additionally lines of debug code are left commented to see what the cityDataChart list contains)
     * @param beginCity The name of the 'origin' city
     * @param endCity The name of the 'destination' city
     * @param chartList A list containing data about every unique city
     * @param databaseList A list containing all available roads from one city to another
     **/
    void createInstanceAndDebug(string beginCity, string endCity, cityDataChart* headC, cityDataBase* headB, cityDataChart* currC, string outputFileName);
    /**
     * @brief A void function recursively recreating the route between the selected cities from the end
     * The function continuously calculates all the elements of the road from one city to another
     * Starts from the end city, ends at the beginning city
     * @param endCity The name of the 'destination' city
     * @param beginCity The name of the 'origin' city
     * @param currentCity The name of the currently evaluated city
     * @param chartList A list containing data about every unique city
     * @param databaseList A list containing all available roads from one city to another
     * @param outputFileName The name of the output file
     * @param linkedList An object identifying a linked list structure
     **/
    void recursiveBacktracker(string endCity, string beginCity, string currentCity, cityDataChart* headC, cityDataBase* headB, cityDataChart* currC, string outputFileName, Map linkedList);
    /**
     * @brief A void function using the data created by the function recursiveBacktracker to recreate the route
     * Allocates the data into an output file
     * @param endCity The name of the 'destination' city
     * @param beginCity The name of the 'origin' city
     * @param databaseList A list containing all available roads from one city to another
     * @param chartList A list containing data about every unique city
     * @param linkedList An object identifying a linked list structure
     **/
    void outputAllocator(string endCity, string beginCity, cityDataChart* headC, cityDataBase* headB, string outputFileName, cityDataChart* currC, Map linkedList);
};
#endif //FOCPMAP_MAP_H
